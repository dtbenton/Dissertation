rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(ez)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
# add median split age column
D$med.split.age = rep(0,25)
for(i in 1:25){
compute = ifelse(D$age[i]<=18.06,0,1)
D$med.split.age[i] = compute
}
# add median split for num.hab
D$med.split.num.hab = rep(0, 25)
for(i in 1:25){
calc = ifelse(D$num.hab[i]<=5,0,1)
D$med.split.num.hab[i] = calc
}
dim(D)
# reorder columns
D = as.data.frame(D[,c(1:6,22,7:23)])
fix(D)
dim(D)
fix(D)
# delete redundant med.split.age column
D$med.split.age.1 = NULL
names(D)
# convert data from "wide" format to "tall" format
D_tall = reshape(D, varying = c(17:20), v.names = "measure",
timevar = "test.trial.level", idvar = "ID",
direction = "long")
D_tall = D_tall[order(D_tall$ID),]
D_tall$sex = as.factor(D_tall$sex)
D_tall$group = as.factor(D_tall$group)
D_tall$med.split.age = as.factor(D_tall$med.split.age)
D_tall$hab.stim.order = as.factor(D_tall$hab.stim.order)
D_tall$test.stim.order = as.factor(D_tall$test.stim.order)
D_tall$test.trial.level = as.factor(D_tall$test.trial.level)
## AGE AS COVARIATE ##
# Create 'F_tall' data frame to use for ggplot
F_tall = D_tall
# rename levels of 'condition' and 'q.type.cat' factors
F_tall$test.trial.level = revalue(x = as.factor(F_tall$test.trial.level),
c("1" = "GBGR", "2"="GRGB", "3" = "GBRG",
"4" = "GRBG"))
F_tall$med.split.age = revalue(x = as.factor(F_tall$med.split.age),
c("0" = "Younger (<=18.06)", "1" = "Older (>18.06)"))
Z = D_tall
Z = Z[order(Z$med.split.age),]
younger_df = Z[c(1:52),]
older_df = Z[c(53:100),]
ancova.main.hab.rate.fit = ezANOVA(D_tall, dv = measure, within=test.trial.level,
between = med.split.num.hab,
wid = ID)
print(ancova.main.hab.rate.fit)
fix(D_tall)
L = D_tall
L = L[order(L$med.split.num.hab),]
slow_habituators_df = L[c(1:52),]
fast_habituators_df = L[c(53:100),]
condition_barplot = ggplot(L, aes(med.split.num.hab, measure, fill = test.trial.level)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
#facet_wrap(~q.type.cat, scales="free") + # create as many separate graphs as there are conditions
ylab("Looking time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 15)) +
theme_classic() +
labs(x = "Test trials")
L$med.split.num.hab = revalue(x = as.factor(L$med.split.num.hab),
c("1" = "Fast Habituators (<=5)", "2"="Slow Habituators (>5)"))
# create separate DFs for both the younger and older infants
L = D_tall
L = L[order(L$med.split.num.hab),]
slow_habituators_df = L[c(1:52),]
fast_habituators_df = L[c(53:100),]
# rename levels of 'condition' and 'q.type.cat' factors
L$med.split.num.hab = revalue(x = as.factor(L$med.split.num.hab),
c("1" = "Fast Habituators (<=5)", "2"="Slow Habituators (>5)"))
condition_barplot = ggplot(L, aes(med.split.num.hab, measure, fill = test.trial.level)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
#facet_wrap(~q.type.cat, scales="free") + # create as many separate graphs as there are conditions
ylab("Looking time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 15)) +
theme_classic() +
labs(x = "Test trials")
L$med.split.num.hab = revalue(x = as.factor(L$med.split.num.hab),
c("1" = "Fast Habituators (<=5)", "2" = "Slow Habituators (>5)"))
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(ez)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D$med.split.age = rep(0,25)
for(i in 1:25){
compute = ifelse(D$age[i]<=18.06,0,1)
D$med.split.age[i] = compute
}
# add median split for num.hab
D$med.split.num.hab = rep(0, 25)
for(i in 1:25){
calc = ifelse(D$num.hab[i]<=5,0,1)
D$med.split.num.hab[i] = calc
}
names(D)
median(D$num.hab)
# reorder columns
D = as.data.frame(D[,c(1:6,22,7:23)])
# convert data from "wide" format to "tall" format
D_tall = reshape(D, varying = c(17:20), v.names = "measure",
timevar = "test.trial.level", idvar = "ID",
direction = "long")
D_tall = D_tall[order(D_tall$ID),]
# delete redundant med.split.age column
D$med.split.age.1 = NULL
D_tall$sex = as.factor(D_tall$sex)
D_tall$group = as.factor(D_tall$group)
D_tall$med.split.age = as.factor(D_tall$med.split.age)
D_tall$hab.stim.order = as.factor(D_tall$hab.stim.order)
D_tall$test.stim.order = as.factor(D_tall$test.stim.order)
D_tall$test.trial.level = as.factor(D_tall$test.trial.level)
L = D_tall
L = L[order(L$med.split.num.hab),]
# rename levels of 'condition' and 'q.type.cat' factors
L$med.split.num.hab = revalue(x = as.factor(L$med.split.num.hab),
c("0" = "Fast Habituators (<=5)", "1" = "Slow Habituators (>5)"))
slow_habituators_df = L[c(1:52),]
fast_habituators_df = L[c(53:100),]
condition_barplot = ggplot(L, aes(med.split.num.hab, measure, fill = test.trial.level)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
#facet_wrap(~q.type.cat, scales="free") + # create as many separate graphs as there are conditions
ylab("Looking time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 15)) +
theme_classic() +
labs(x = "Test trials")
condition_barplot = ggplot(L, aes(med.split.num.hab, measure, fill = test.trial.level)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
#facet_wrap(~q.type.cat, scales="free") + # create as many separate graphs as there are conditions
ylab("Looking time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 18)) +
theme_classic() +
labs(x = "Test trials")
condition_barplot = ggplot(slow_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
fix(L)
fast_habituators_df = L[c(1:52),]
slow_habituators_df = L[c(53:100),]
# SLOW HABITUATORS
condition_barplot = ggplot(slow_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(fast_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(slow_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
condition_barplot = ggplot(fast_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
fix(L)
fix(D_tall)
dim(D_tall)
fix(L)
fix(D)
fix(D)
fix(D)
13-7
chi.slow.data = matrix(c(5,2,6),1)
dimnames(chi.slow.data) = list(c("Slow Habituators"), c("Markov", "Perceptual", "Other"))
chi.slow.data
chi.slow.test = chisq.test(chi.slow.data, simulate.p.value = TRUE)
chi.slow.test
condition_barplot = ggplot(fast_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
fix(D)
fix(D)
fix(D)
dim(fast_habituators_df)
dim(slow_habituators_df)
condition_barplot = ggplot(slow_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
chi.slow.data = matrix(c(5,2,5),1)
# run chisq.test() on chi table
chi.slow.test = chisq.test(chi.slow.data, simulate.p.value = TRUE)
chi.slow.test
condition_barplot = ggplot(fast_habituators_df, aes(test.trial.level, measure, fill = med.split.num.hab)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
fix(D)
chi.fast.data = matrix(c(5,2,6),1)
# run chisq.test() on chi table
chi.fast.test = chisq.test(chi.fast.data, simulate.p.value = TRUE)
chi.fast.test
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(ez)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D$med.split.age = rep(0,25)
for(i in 1:25){
compute = ifelse(D$age[i]<=18.06,0,1)
D$med.split.age[i] = compute
}
# add median split for num.hab
D$med.split.num.hab = rep(0, 25)
for(i in 1:25){
calc = ifelse(D$num.hab[i]<=5,0,1)
D$med.split.num.hab[i] = calc
}
# reorder columns
D = as.data.frame(D[,c(1:6,22,7:23)])
# delete redundant med.split.age column
D$med.split.age.1 = NULL
# convert data from "wide" format to "tall" format
D_tall = reshape(D, varying = c(17:20), v.names = "measure",
timevar = "test.trial.level", idvar = "ID",
direction = "long")
D_tall = D_tall[order(D_tall$ID),]
# set appropriate factor variables in "tall" data
D_tall$sex = as.factor(D_tall$sex)
D_tall$group = as.factor(D_tall$group)
D_tall$med.split.age = as.factor(D_tall$med.split.age)
D_tall$hab.stim.order = as.factor(D_tall$hab.stim.order)
D_tall$test.stim.order = as.factor(D_tall$test.stim.order)
D_tall$test.trial.level = as.factor(D_tall$test.trial.level)
hist(D_tall$ttl.hab)
ancova.main.fit = ezANOVA(D_tall, dv = measure, within=test.trial.level,
wid = ID,
between_covariates=age)
print(ancova.main.fit)
?etaSquared
ancova.fit = lme(measure~test.trial.level+age, random=~1|ID, data=D_tall)
aov.ancova.fit = anova.lme(ancova.fit)
etaSquared(aov.ancova.fit)
install.packages("etaSquared")
?etasq()
?etasq
install.packages("heplots")
?etsq
?etasq
library(heplots)
?etasq
etasq(ancova.fit)
etasq(ancova.main.fit)
aov(ancova.fit)
ancova.fit = lme(measure~test.trial.level+age, random=~1|ID, data=D_tall)
aov.ancova.fit = anova.lme(ancova.fit)
aov(ancova.fit)
str(D_tall)
?aov
install.packages("sjstats")
library(sjstats)
?eta_sq
eta_sq(lme(measure~test.trial.level+age, random=~1|ID, data=D_tall))
dim(D_tall)
eta_sq(ancova.fit, partial = FALSE, n = 1000)
print(ancova.main.fit)
ancova.fit = lme(measure~test.trial.level+age, random=~1|ID, data=D_tall)
aov.ancova.fit = anova.lme(ancova.fit)
aov.ancova.fit
aov(ancova.fit)
anova(ancova.fit, type="III")
anova(ancova.fit)
ancova.ttl.hab = ezANOVA(D_tall, dv = ttl.hab, between = .(sex, group, test.stim.order),
wid = ID,
between_covariates=age)
print(ancova.ttl.hab)
(6983.026/(6983.026+12953.85))
ancova.fit = lme(measure~test.trial.level+age, random=~1|ID, data=D_tall)
aov.ancova.fit = anova.lme(ancova.fit)
aov.ancova.fit
ancova.fit$sigma
ancova.fit$residuals[,1]
summary(ancova.fit)
?ez
aov.ancova.fit
summary(aov.ancova.fit)
names(aov.ancova.fit)
omega_sq <- function(aovm){
sum_stats <- summary(aovm)[[1]]
SSm <- sum_stats[["Sum Sq"]][1]
SSr <- sum_stats[["Sum Sq"]][2]
DFm <- sum_stats[["Df"]][1]
MSr <- sum_stats[["Mean Sq"]][2]
W2 <- (SSm-DFm*MSr)/(SSm+SSr+MSr)
return(W2)
}
omega_sq(ancova.main.fit)
r2(ancova.fit)
aov.ancova.fit
# get r2 for global model
r2(ancova.fit)
install.packages("afex")
library(afex)
hist(D_tall$ttl.hab)
F_tall = D_tall
# rename levels of 'condition' and 'q.type.cat' factors
F_tall$test.trial.level = revalue(x = as.factor(F_tall$test.trial.level),
c("1" = "GBGR", "2"="GRGB", "3" = "GBRG",
"4" = "GRBG"))
F_tall$med.split.age = revalue(x = as.factor(F_tall$med.split.age),
c("0" = "Younger (<=18.06)", "1" = "Older (>18.06)"))
# OMNIBUS ANALYSIS FIGURE
condition_barplot = ggplot(F_tall, aes(test.trial.level, measure)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
#facet_wrap(~q.type.cat, scales="free") + # create as many separate graphs as there are conditions
ylab("Looking time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 15)) +
theme_classic() +
labs(x = "Test trials") # change the main x-axis label
Z = D_tall
Z = Z[order(Z$med.split.age),]
younger_df = Z[c(1:52),]
older_df = Z[c(53:100),]
# Younger Infants
condition_barplot = ggplot(younger_df, aes(test.trial.level, measure, fill = med.split.age)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~ID) + # create as many separate graphs as there are conditions
ylab("Looking Time (s)") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 80)) +
scale_fill_manual(values=c("#000000", "#999999")) +
theme(strip.background =element_rect(fill='black')) +
theme(strip.text = element_text(colour = 'white', size = 12, face = "bold")) +
theme(axis.title=element_text(size="12"),axis.text=element_text(size=12)) +
theme(legend.box.background = element_rect(), legend.box.margin = margin(6, 6, 6, 6)) +
theme(legend.text = element_text(size = 12)) +
theme(legend.title=element_blank()) +
labs(x = "Test trials")
?afex
??afex
ancova.main.fit = ezANOVA(D_tall, dv = measure, within=test.trial.level,
wid = ID,
between_covariates=age)
print(ancova.main.fit)
ancova.fit = lme(measure~test.trial.level+age, random=~1|ID, data=D_tall)
aov.ancova.fit = anova.lme(ancova.fit)
aov.ancova.fit
summary(lme(measure~test.trial.level+age, random=~1|ID, data=D_tall))
aov.ancova.fit
ancova.main.fit = ezANOVA(D_tall, dv = measure, within=test.trial.level,
wid = ID,
between_covariates=age)
print(ancova.main.fit)
